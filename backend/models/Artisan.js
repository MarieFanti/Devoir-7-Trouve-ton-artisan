import db from "../config/db.js";

class Artisan {
  /** üîπ R√©cup√©rer tous les artisans */
  static async getAll() {
    try {
      const [rows] = await db.query("SELECT * FROM artisans ORDER BY nom ASC");
      return rows;
    } catch (err) {
      throw new Error("Erreur lors de la r√©cup√©ration des artisans : " + err.message);
    }
  }

  /** üîπ R√©cup√©rer un artisan par son ID */
  static async getById(id) {
    try {
      const [rows] = await db.query("SELECT * FROM artisans WHERE id = ?", [id]);
      return rows[0];
    } catch (err) {
      throw new Error("Erreur lors de la r√©cup√©ration de l‚Äôartisan : " + err.message);
    }
  }

  /** üîπ R√©cup√©rer les artisans par cat√©gorie */
  static async getByCategory(category) {
    try {
      const [rows] = await db.query(
        "SELECT * FROM artisans WHERE categorie = ? ORDER BY nom ASC",
        [category]
      );
      return rows;
    } catch (err) {
      throw new Error("Erreur lors de la r√©cup√©ration des artisans par cat√©gorie : " + err.message);
    }
  }

  /** üîπ Recherche par nom (insensible √† la casse) */
  static async searchByName(name) {
    try {
      const [rows] = await db.query(
        "SELECT * FROM artisans WHERE LOWER(nom) LIKE LOWER(?) ORDER BY nom ASC",
        [`%${name}%`]
      );
      return rows;
    } catch (err) {
      throw new Error("Erreur lors de la recherche d‚Äôartisans : " + err.message);
    }
  }

  /** üîπ Top 3 artisans du mois */
  static async getTop() {
    try {
      const [rows] = await db.query(
        "SELECT * FROM artisans WHERE top = 1 ORDER BY note DESC LIMIT 3"
      );
      return rows;
    } catch (err) {
      throw new Error("Erreur lors de la r√©cup√©ration des top artisans : " + err.message);
    }
  }
}

export default Artisan;
